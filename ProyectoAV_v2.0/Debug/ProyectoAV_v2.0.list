
ProyectoAV_v2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b70  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001d08  08001d10  00002d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001d08  08001d08  00002d10  2**0
                  CONTENTS
  4 .ARM          00000000  08001d08  08001d08  00002d10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d08  08001d10  00002d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d08  08001d08  00002d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d0c  08001d0c  00002d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00002d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002d10  2**0
                  CONTENTS
 10 .bss          0000004c  20000000  20000000  00003000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00003000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002a48  00000000  00000000  00002d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000945  00000000  00000000  00005788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000380  00000000  00000000  000060d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000029a  00000000  00000000  00006450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ec8  00000000  00000000  000066ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f16  00000000  00000000  0001f5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088a99  00000000  00000000  000224c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aaf61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000cec  00000000  00000000  000aafa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000abc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001cf0 	.word	0x08001cf0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08001cf0 	.word	0x08001cf0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <RCC_En_CANx>:
 *      Author: joshu
 */

#include "CANx.h"

void RCC_En_CANx(CAN_TypeDef *port){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
		if(port == CAN1){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a07      	ldr	r2, [pc, #28]	@ (8000a3c <RCC_En_CANx+0x28>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d105      	bne.n	8000a30 <RCC_En_CANx+0x1c>
			SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_CAN1EN);
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <RCC_En_CANx+0x2c>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a28:	4a05      	ldr	r2, [pc, #20]	@ (8000a40 <RCC_En_CANx+0x2c>)
 8000a2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a2e:	6593      	str	r3, [r2, #88]	@ 0x58
		}
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	40006400 	.word	0x40006400
 8000a40:	40021000 	.word	0x40021000

08000a44 <CANx_Init>:

void CANx_Init(CAN_TypeDef *port){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	SET_BIT(port->MCR, CAN_MCR_RESET);//Reset FORZAMOS a entrar a modo sleep
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
	while(port->MCR & CAN_MCR_RESET) {}; //Esperamos a que el bit RESET se limpie
 8000a58:	bf00      	nop
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f9      	bne.n	8000a5a <CANx_Init+0x16>
	SET_BIT(port->MCR, CAN_MCR_INRQ);//Solicitamos entrar a modo inicializacion
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f043 0201 	orr.w	r2, r3, #1
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
	while((port->MSR & CAN_MSR_INAK)==0){};//Esperamos a que el bit INAK sea set
 8000a72:	bf00      	nop
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0f9      	beq.n	8000a74 <CANx_Init+0x30>
	CLEAR_BIT(port->MCR, CAN_MCR_SLEEP);//Solicitamos Apagagar modo sleep
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f023 0202 	bic.w	r2, r3, #2
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	601a      	str	r2, [r3, #0]
	while(port->MSR & CAN_MSR_SLAK) {}; //Esperamos a que el bit SLAK se limpie ****ENTRAMOS A MODO INICIALIZACION TRAS ackmowledge de sleep off
 8000a8c:	bf00      	nop
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1f9      	bne.n	8000a8e <CANx_Init+0x4a>

	CLEAR_BIT(port->MCR, CAN_MCR_TXFP);// Inicializas el arbitraje, es decir la prioridad de cada mensaje es por identificador
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f023 0204 	bic.w	r2, r3, #4
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_RFLM);//La FIFO no se bloquea al haber estado de OVERRUN
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f023 0208 	bic.w	r2, r3, #8
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
	SET_BIT(port->MCR, CAN_MCR_NART);//Activamos la retransmisión automática.
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f043 0210 	orr.w	r2, r3, #16
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]
	//Modificar, si no se desea retransmitir NART=1.
	CLEAR_BIT(port->MCR, CAN_MCR_AWUM);//AQUI SALIMOS DE MODO SLEEP POR SOFTWARE, EN UN FUTURO CONSIDERAR CAMBIARLOS A MODO HARDWARE PARA MODOS DE BAJO CONSUMO (CARRO PRENDIDO?)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f023 0220 	bic.w	r2, r3, #32
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_ABOM);//SALIDA DE BUSS OFF POR SOFTWARE
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_TTCM);//Desactivamos funcion solo disponible para RTOS
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_RESET);//
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_DBF);//Activa funcionamiento en modo debug
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]

}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <CANx_BitTiming_500Kz>:

void CANx_BitTiming_500Kz (CAN_TypeDef *port){
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]

	SET_BIT(port->BTR , (CAN_BTR_LBKM)); //Descomentar si se quieren hacer pruebas en modo loopback
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	61da      	str	r2, [r3, #28]
	//SET_BIT(port->Register->BTR , (CAN_SILENT));
	CLEAR_BIT(port->BTR , (CAN_BTR_BRP));//limpia  BRP
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000b22:	f023 0303 	bic.w	r3, r3, #3
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	61d3      	str	r3, [r2, #28]
	CLEAR_BIT(port->BTR , (CAN_BTR_TS1));//limpia TS1
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	61da      	str	r2, [r3, #28]
	CLEAR_BIT(port->BTR , (CAN_BTR_TS2));//limpia TS2
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	61da      	str	r2, [r3, #28]

	SET_BIT(port->BTR , ((0x1UL)<<CAN_BTR_BRP_Pos));//fija Baud rate
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f043 0201 	orr.w	r2, r3, #1
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	61da      	str	r2, [r3, #28]
	SET_BIT(port->BTR , ((11U)<<CAN_BTR_TS1_Pos));//configura tS1
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f443 2230 	orr.w	r2, r3, #720896	@ 0xb0000
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	61da      	str	r2, [r3, #28]
	SET_BIT(port->BTR , ((0x2UL)<<CAN_BTR_TS2_Pos));//configura tS2
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	61da      	str	r2, [r3, #28]

}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <CAN_FilterInit>:


void CAN_FilterInit (CAN_TypeDef *port, bool Mode, bool Scale, bool Fifo, uint8_t BitIndex){
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4603      	mov	r3, r0
 8000b82:	70fb      	strb	r3, [r7, #3]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70bb      	strb	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	707b      	strb	r3, [r7, #1]
	CLEAR_BIT(port->FA1R, (1 << BitIndex)); //Desactivo el filtro del Bit index
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000b92:	7c3a      	ldrb	r2, [r7, #16]
 8000b94:	2101      	movs	r1, #1
 8000b96:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9a:	43d2      	mvns	r2, r2
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	SET_BIT(port->MSR,CAN_FMR_FINIT);//modo inicialización en los filtros
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f043 0201 	orr.w	r2, r3, #1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	605a      	str	r2, [r3, #4]

    // Configuramos el bit correspondiente utilizando BitIndex para configurar modo lista o mascara
    if (Mode) {
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00b      	beq.n	8000bce <CAN_FilterInit+0x5c>
    	SET_BIT(port->FM1R, (1 << BitIndex)); // Si Mode es verdadero, establecemos el bit en BitIndex
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000bbc:	7c3a      	ldrb	r2, [r7, #16]
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000bcc:	e00b      	b.n	8000be6 <CAN_FilterInit+0x74>
    } else {
    	CLEAR_BIT(port->FM1R, (1 << BitIndex)); // Si Mode es falso, limpiamos el bit en BitIndex
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000bd4:	7c3a      	ldrb	r2, [r7, #16]
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	43d2      	mvns	r2, r2
 8000bde:	401a      	ands	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

 // Configuramos el bit correspondiente utilizando BitIndex para configurar la escala
    if (Scale) {
 8000be6:	78bb      	ldrb	r3, [r7, #2]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d00b      	beq.n	8000c04 <CAN_FilterInit+0x92>
        SET_BIT(port->FS1R, (1 << BitIndex)); // Si Mode es verdadero, establecemos el bit en BitIndex
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000bf2:	7c3a      	ldrb	r2, [r7, #16]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8000c02:	e00b      	b.n	8000c1c <CAN_FilterInit+0xaa>
    } else {
        CLEAR_BIT(port->FS1R, (1 << BitIndex));// Si Mode es falso, limpiamos el bit en BitIndex
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000c0a:	7c3a      	ldrb	r2, [r7, #16]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c12:	43d2      	mvns	r2, r2
 8000c14:	401a      	ands	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    }

    // Configuramos el bit correspondiente utilizando BitIndex para asignar a FIFO0 o FIFO1
     if (Fifo) {
 8000c1c:	787b      	ldrb	r3, [r7, #1]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d00b      	beq.n	8000c3a <CAN_FilterInit+0xc8>
         SET_BIT(port->FFA1R, (1 << BitIndex));// Si Mode es verdadero, establecemos el bit en BitIndex
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000c28:	7c3a      	ldrb	r2, [r7, #16]
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c30:	431a      	orrs	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c38:	e00b      	b.n	8000c52 <CAN_FilterInit+0xe0>
     } else {
         CLEAR_BIT(port->FFA1R, (1 << BitIndex));// Si Mode es falso, limpiamos el bit en BitIndex FFA1R
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000c40:	7c3a      	ldrb	r2, [r7, #16]
 8000c42:	2101      	movs	r1, #1
 8000c44:	fa01 f202 	lsl.w	r2, r1, r2
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
     }

     SET_BIT(port->FA1R, (1 << BitIndex)); //Acitva el filtro del Bit index
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000c58:	7c3a      	ldrb	r2, [r7, #16]
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
     CLEAR_BIT(port->FMR,CAN_FMR_FINIT);//fin de modo inicialización
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c6e:	f023 0201 	bic.w	r2, r3, #1
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <CAN_SetFilterValue>:

void CAN_SetFilterValue(CAN_TypeDef *port, uint32_t ID, uint32_t Mask, uint8_t BitIndex){
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	70fb      	strb	r3, [r7, #3]

    SET_BIT(port->FMR, CAN_FMR_FINIT); // Activamos el modo de inicialización de filtros
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c98:	f043 0201 	orr.w	r2, r3, #1
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(port->FA1R, (1 << BitIndex));// Desactivamos temporalmente el filtro correspondiente
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000ca8:	78fa      	ldrb	r2, [r7, #3]
 8000caa:	2101      	movs	r1, #1
 8000cac:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb0:	43d2      	mvns	r2, r2
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    // Configuramos los registros de filtro y máscara

    port->sFilterRegister[BitIndex].FR1 &= ~(0xFFFFFFFF);  // Limpia bits antes de escribir
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3248      	adds	r2, #72	@ 0x48
 8000cc0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000cc4:	78fa      	ldrb	r2, [r7, #3]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3248      	adds	r2, #72	@ 0x48
 8000cca:	2100      	movs	r1, #0
 8000ccc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    port->sFilterRegister[BitIndex].FR2 &= ~(0xFFFFFFFF);  // Limpia bits antes de escribir
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	3348      	adds	r3, #72	@ 0x48
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	3348      	adds	r3, #72	@ 0x48
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]

    port->sFilterRegister[BitIndex].FR1 = ID;    // Registro de filtro
 8000cea:	78fa      	ldrb	r2, [r7, #3]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3248      	adds	r2, #72	@ 0x48
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    port->sFilterRegister[BitIndex].FR2 = Mask;   // Registro de máscara
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	3348      	adds	r3, #72	@ 0x48
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4413      	add	r3, r2
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	605a      	str	r2, [r3, #4]

    // Reactivamos el filtro y salimos del modo de inicialización
    SET_BIT(port->FA1R, (1 << BitIndex));
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000d0a:	78fa      	ldrb	r2, [r7, #3]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	431a      	orrs	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    CLEAR_BIT(port->FMR, CAN_FMR_FINIT);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d20:	f023 0201 	bic.w	r2, r3, #1
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <CAN_MailboxConfig>:

void CAN_MailboxConfig(CAN_TypeDef *port, bool ExtendedID, uint32_t ID, bool Remote, uint8_t mailboxIndex){
 8000d36:	b480      	push	{r7}
 8000d38:	b085      	sub	sp, #20
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	461a      	mov	r2, r3
 8000d42:	460b      	mov	r3, r1
 8000d44:	72fb      	strb	r3, [r7, #11]
 8000d46:	4613      	mov	r3, r2
 8000d48:	72bb      	strb	r3, [r7, #10]

	port->sTxMailBox[mailboxIndex].TIR &= ~(0xFFFFFFFF); //Limplia el registro TIR del milebox correspondiente
 8000d4a:	7e3b      	ldrb	r3, [r7, #24]
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	3318      	adds	r3, #24
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	4413      	add	r3, r2
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	7e3b      	ldrb	r3, [r7, #24]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	3318      	adds	r3, #24
 8000d5c:	011b      	lsls	r3, r3, #4
 8000d5e:	4413      	add	r3, r2
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]

    if (mailboxIndex > 2) {//Si se usa la funcion con un index superior a 2 sale de la funcion ya que solo tenemos 3 mailbox
 8000d64:	7e3b      	ldrb	r3, [r7, #24]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d836      	bhi.n	8000dd8 <CAN_MailboxConfig+0xa2>
        return;
    }
    // Configuramos el bit correspondiente utilizando isExtendedID para configurar IDE y cargar el identificador
    if (ExtendedID) {
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00a      	beq.n	8000d86 <CAN_MailboxConfig+0x50>
        port->sTxMailBox[mailboxIndex].TIR = (ID << 3) | (1 << 2); // ID extendida: ID en bits 31:3, IDE en bit 2
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	00da      	lsls	r2, r3, #3
 8000d74:	7e3b      	ldrb	r3, [r7, #24]
 8000d76:	f042 0204 	orr.w	r2, r2, #4
 8000d7a:	68f9      	ldr	r1, [r7, #12]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	440b      	add	r3, r1
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	e007      	b.n	8000d96 <CAN_MailboxConfig+0x60>
    } else {
        port->sTxMailBox[mailboxIndex].TIR = (ID << 21); // ID estándar: ID en bits 31:21, IDE desactivado
 8000d86:	7e3b      	ldrb	r3, [r7, #24]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	0552      	lsls	r2, r2, #21
 8000d8c:	68f9      	ldr	r1, [r7, #12]
 8000d8e:	3318      	adds	r3, #24
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	440b      	add	r3, r1
 8000d94:	601a      	str	r2, [r3, #0]
    }

    // Configuramos RTR para indicar si es trama de datos o remota
    if (Remote) {
 8000d96:	7abb      	ldrb	r3, [r7, #10]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00e      	beq.n	8000dba <CAN_MailboxConfig+0x84>
        SET_BIT(port->sTxMailBox[mailboxIndex].TIR, CAN_TI0R_RTR); // Activa bit RTR para trama remota
 8000d9c:	7e3b      	ldrb	r3, [r7, #24]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	3318      	adds	r3, #24
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	4413      	add	r3, r2
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	7e3b      	ldrb	r3, [r7, #24]
 8000daa:	f042 0202 	orr.w	r2, r2, #2
 8000dae:	68f9      	ldr	r1, [r7, #12]
 8000db0:	3318      	adds	r3, #24
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	440b      	add	r3, r1
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e00f      	b.n	8000dda <CAN_MailboxConfig+0xa4>
    } else {
        CLEAR_BIT(port->sTxMailBox[mailboxIndex].TIR, CAN_TI0R_RTR); // Desactiva bit RTR para trama de datos
 8000dba:	7e3b      	ldrb	r3, [r7, #24]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	3318      	adds	r3, #24
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	4413      	add	r3, r2
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	7e3b      	ldrb	r3, [r7, #24]
 8000dc8:	f022 0202 	bic.w	r2, r2, #2
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	3318      	adds	r3, #24
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	440b      	add	r3, r1
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e000      	b.n	8000dda <CAN_MailboxConfig+0xa4>
        return;
 8000dd8:	bf00      	nop
    }
}
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <CAN_SendData>:


void CAN_SendData(CAN_TypeDef *port, uint8_t DLC, uint64_t data, uint8_t mailboxIndex) {
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	e9c7 2300 	strd	r2, r3, [r7]
 8000df0:	460b      	mov	r3, r1
 8000df2:	72fb      	strb	r3, [r7, #11]

	port->sTxMailBox[mailboxIndex].TDTR &= ~(0xFFFFFFFF); //Limpia valores de TDTR
 8000df4:	7e3b      	ldrb	r3, [r7, #24]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	3318      	adds	r3, #24
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3304      	adds	r3, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	7e3b      	ldrb	r3, [r7, #24]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	3318      	adds	r3, #24
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
	port->sTxMailBox[mailboxIndex].TDLR &= ~(0xFFFFFFFF); //Limpia valores de TDLR
 8000e12:	7e3b      	ldrb	r3, [r7, #24]
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	4413      	add	r3, r2
 8000e1a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	7e3b      	ldrb	r3, [r7, #24]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4413      	add	r3, r2
 8000e28:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
	port->sTxMailBox[mailboxIndex].TDHR &= ~(0xFFFFFFFF); //Limpia calores de TDHR
 8000e30:	7e3b      	ldrb	r3, [r7, #24]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	4413      	add	r3, r2
 8000e38:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	7e3b      	ldrb	r3, [r7, #24]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	4413      	add	r3, r2
 8000e46:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]


    if (mailboxIndex > 2) {
 8000e4e:	7e3b      	ldrb	r3, [r7, #24]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d822      	bhi.n	8000e9a <CAN_SendData+0xb6>
        return;
    }
    port->sTxMailBox[mailboxIndex].TDTR = DLC & 0xF;
 8000e54:	7afa      	ldrb	r2, [r7, #11]
 8000e56:	7e3b      	ldrb	r3, [r7, #24]
 8000e58:	f002 020f 	and.w	r2, r2, #15
 8000e5c:	68f9      	ldr	r1, [r7, #12]
 8000e5e:	3318      	adds	r3, #24
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	440b      	add	r3, r1
 8000e64:	3304      	adds	r3, #4
 8000e66:	601a      	str	r2, [r3, #0]
    port->sTxMailBox[mailboxIndex].TDLR = data & 0xFFFFFFFF;
 8000e68:	7e3b      	ldrb	r3, [r7, #24]
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	68f9      	ldr	r1, [r7, #12]
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	440b      	add	r3, r1
 8000e72:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e76:	601a      	str	r2, [r3, #0]
    port->sTxMailBox[mailboxIndex].TDHR = (data >> 32) & 0xFFFFFFFF;
 8000e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	000a      	movs	r2, r1
 8000e86:	2300      	movs	r3, #0
 8000e88:	7e39      	ldrb	r1, [r7, #24]
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	010b      	lsls	r3, r1, #4
 8000e90:	4413      	add	r3, r2
 8000e92:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e96:	6018      	str	r0, [r3, #0]
 8000e98:	e000      	b.n	8000e9c <CAN_SendData+0xb8>
        return;
 8000e9a:	bf00      	nop
}
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <CANx_EnFIFO1Ints>:

    return flag;
}


void CANx_EnFIFO1Ints(CAN_TypeDef * port){
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	SET_BIT(port->IER, CAN_IER_FMPIE1|CAN_IER_FFIE1|CAN_IER_FOVIE1);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f043 0270 	orr.w	r2, r3, #112	@ 0x70
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	615a      	str	r2, [r3, #20]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <CANx_EnFIFO0Ints>:

void CANx_EnFIFO0Ints(CAN_TypeDef * port){
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	SET_BIT(port->IER, CAN_IER_FMPIE0|CAN_IER_FFIE0|CAN_IER_FOVIE0);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f043 020e 	orr.w	r2, r3, #14
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	615a      	str	r2, [r3, #20]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <CANx_GetLEC>:



uint8_t CANx_GetLEC(CAN_TypeDef * port){
 8000ee6:	b480      	push	{r7}
 8000ee8:	b085      	sub	sp, #20
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	uint8_t lec = (port->ESR & CAN_ESR_LEC_Msk) >> CAN_ESR_LEC_Pos; // Leer y desplazar campo LEC
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	73fb      	strb	r3, [r7, #15]
	return lec;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <CAN1_Rx0_FIFOx>:


void CAN1_Rx0_FIFOx(CAN_TypeDef *port, CAN_FIFOMailBox_TypeDef *fifo) {
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
    if (port->RF0R & CAN_RF0R_FMP0) { // Nuevo mensaje en FIFO
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d027      	beq.n	8000f70 <CAN1_Rx0_FIFOx+0x66>
        // Verificar el Last Error Code (LEC)
        if (CANx_GetLEC(port) == CAN_LEC_NO_ERROR) { // No hubo errores en la recepción
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ffe0 	bl	8000ee6 <CANx_GetLEC>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d11a      	bne.n	8000f62 <CAN1_Rx0_FIFOx+0x58>
            // Copiar los datos del FIFO a la estructura fifo
            fifo->RIR = port->sFIFOMailBox[0].RIR;      // Identificador del mensaje
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	601a      	str	r2, [r3, #0]
            fifo->RDTR = port->sFIFOMailBox[0].RDTR;    // Código de longitud de datos y FMI
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
            fifo->RDLR = port->sFIFOMailBox[0].RDLR;    // Datos (Low)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	609a      	str	r2, [r3, #8]
            fifo->RDHR = port->sFIFOMailBox[0].RDHR;    // Datos (High)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	60da      	str	r2, [r3, #12]
            // Manejo del error: descartar el mensaje y liberar el FIFO
            SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
            return; // Salir de la función sin llenar la estructura
        }
        // Liberar el FIFO para el siguiente mensaje
        SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	f043 0220 	orr.w	r2, r3, #32
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	e04d      	b.n	8000ffe <CAN1_Rx0_FIFOx+0xf4>
            SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f043 0220 	orr.w	r2, r3, #32
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60da      	str	r2, [r3, #12]
            return; // Salir de la función sin llenar la estructura
 8000f6e:	e046      	b.n	8000ffe <CAN1_Rx0_FIFOx+0xf4>

    } else if (port->RF0R & CAN_RF0R_FULL0) { // FIFO lleno
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d01a      	beq.n	8000fb2 <CAN1_Rx0_FIFOx+0xa8>
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[0].RIR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[0].RDTR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[0].RDLR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[0].RDHR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO para evitar la pérdida de datos
        SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f043 0220 	orr.w	r2, r3, #32
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	e025      	b.n	8000ffe <CAN1_Rx0_FIFOx+0xf4>

    } else if (port->RF0R & CAN_RF0R_FOVR0) { // Sobrecarga en el FIFO
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d01f      	beq.n	8000ffe <CAN1_Rx0_FIFOx+0xf4>
        // Manejar el estado de sobrecarga y limpiar el bit de sobrecarga
        CLEAR_BIT(port->RF0R, CAN_RF0R_FOVR0);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	f023 0210 	bic.w	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60da      	str	r2, [r3, #12]
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[0].RIR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[0].RDTR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[0].RDLR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[0].RDHR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO
        SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	f043 0220 	orr.w	r2, r3, #32
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60da      	str	r2, [r3, #12]
    }
}
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <CAN1_Rx1_FIFOx>:


void CAN1_Rx1_FIFOx(CAN_TypeDef *port, CAN_FIFOMailBox_TypeDef *fifo) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
    if (port->RF1R & CAN_RF1R_FMP1) { // Nuevo mensaje en FIFO
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d027      	beq.n	800106a <CAN1_Rx1_FIFOx+0x66>
        // Verificar el Last Error Code (LEC)
        if (CANx_GetLEC(port) == CAN_LEC_NO_ERROR) { // No hubo errores en la recepción
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff63 	bl	8000ee6 <CANx_GetLEC>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d11a      	bne.n	800105c <CAN1_Rx1_FIFOx+0x58>
            // Copiar los datos del FIFO a la estructura fifo
            fifo->RIR = port->sFIFOMailBox[1].RIR;      // Identificador del mensaje
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	601a      	str	r2, [r3, #0]
            fifo->RDTR = port->sFIFOMailBox[1].RDTR;    // Código de longitud de datos y FMI
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	605a      	str	r2, [r3, #4]
            fifo->RDLR = port->sFIFOMailBox[1].RDLR;    // Datos (Low)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	609a      	str	r2, [r3, #8]
            fifo->RDHR = port->sFIFOMailBox[1].RDHR;    // Datos (High)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	60da      	str	r2, [r3, #12]
            // Manejo del error: descartar el mensaje y liberar el FIFO
            SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
            return; // Salir de la función sin llenar la estructura
        }
        // Liberar el FIFO para el siguiente mensaje
        SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	f043 0220 	orr.w	r2, r3, #32
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	e04d      	b.n	80010f8 <CAN1_Rx1_FIFOx+0xf4>
            SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	f043 0220 	orr.w	r2, r3, #32
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	611a      	str	r2, [r3, #16]
            return; // Salir de la función sin llenar la estructura
 8001068:	e046      	b.n	80010f8 <CAN1_Rx1_FIFOx+0xf4>

    } else if (port->RF1R & CAN_RF1R_FULL1) { // FIFO lleno
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	d01a      	beq.n	80010ac <CAN1_Rx1_FIFOx+0xa8>
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[1].RIR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[1].RDTR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[1].RDLR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[1].RDHR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO para evitar la pérdida de datos
        SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	f043 0220 	orr.w	r2, r3, #32
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	e025      	b.n	80010f8 <CAN1_Rx1_FIFOx+0xf4>

    } else if (port->RF1R & CAN_RF1R_FOVR1) { // Sobrecarga en el FIFO
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d01f      	beq.n	80010f8 <CAN1_Rx1_FIFOx+0xf4>
        // Manejar el estado de sobrecarga y limpiar el bit de sobrecarga
        CLEAR_BIT(port->RF1R, CAN_RF1R_FOVR1);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	f023 0210 	bic.w	r2, r3, #16
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	611a      	str	r2, [r3, #16]
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[1].RIR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[1].RDTR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[1].RDLR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[1].RDHR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO
        SET_BIT(port->RF0R, CAN_RF1R_RFOM1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f043 0220 	orr.w	r2, r3, #32
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	60da      	str	r2, [r3, #12]
    }
}
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <GPIOx_InitAF>:
#define GPIO_OTYPER_OD                   1UL //Very High Speed

//Inicializa en la función alterna los puertos

                              /*Puerto	-	OTYPER	-	OSPEEDR		-	AFR		-	PUR*/
void GPIOx_InitAF(GPIO_TypeDef *Port_, uint8_t Pin_, uint8_t OTYPER_, uint8_t OSPEEDR_, uint8_t AFR_, bool PUR){ //L45
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	4608      	mov	r0, r1
 8001108:	4611      	mov	r1, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4603      	mov	r3, r0
 800110e:	70fb      	strb	r3, [r7, #3]
 8001110:	460b      	mov	r3, r1
 8001112:	70bb      	strb	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
	CLEAR_BIT(Port_->MODER,(3 << (Pin_ * 2)));//Alternate Function on Pin x=1,...,15 /L45
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	78fa      	ldrb	r2, [r7, #3]
 800111e:	0052      	lsls	r2, r2, #1
 8001120:	2103      	movs	r1, #3
 8001122:	fa01 f202 	lsl.w	r2, r1, r2
 8001126:	43d2      	mvns	r2, r2
 8001128:	401a      	ands	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	601a      	str	r2, [r3, #0]
	SET_BIT(Port_->MODER,(GPIO_MODER_AF << (Pin_ * 2)));//Alternate Function on Pin x=1,...,15 /L45
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2102      	movs	r1, #2
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	431a      	orrs	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
	SET_BIT(Port_->OTYPER,((OTYPER_ & 1) << (Pin_)));//Opend Drain or push pull
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	78ba      	ldrb	r2, [r7, #2]
 8001148:	f002 0101 	and.w	r1, r2, #1
 800114c:	78fa      	ldrb	r2, [r7, #3]
 800114e:	fa01 f202 	lsl.w	r2, r1, r2
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	605a      	str	r2, [r3, #4]
	SET_BIT(Port_->OSPEEDR,(OSPEEDR_ << (Pin_ * 2)));//High Speed
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	7879      	ldrb	r1, [r7, #1]
 800115e:	78fa      	ldrb	r2, [r7, #3]
 8001160:	0052      	lsls	r2, r2, #1
 8001162:	fa01 f202 	lsl.w	r2, r1, r2
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]
	if(Pin_ > 7){
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b07      	cmp	r3, #7
 8001170:	d90b      	bls.n	800118a <GPIOx_InitAF+0x8c>
		SET_BIT(Port_->AFR[1],(AFR_ <<((Pin_ - 8) * 4)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001176:	7c39      	ldrb	r1, [r7, #16]
 8001178:	78fa      	ldrb	r2, [r7, #3]
 800117a:	3a08      	subs	r2, #8
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	625a      	str	r2, [r3, #36]	@ 0x24
 8001188:	e009      	b.n	800119e <GPIOx_InitAF+0xa0>
	}
	else{
		SET_BIT(Port_->AFR[0],(AFR_ << (Pin_ * 4)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	7c39      	ldrb	r1, [r7, #16]
 8001190:	78fa      	ldrb	r2, [r7, #3]
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	fa01 f202 	lsl.w	r2, r1, r2
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	621a      	str	r2, [r3, #32]
	}
	//Veificar IDR? Debe estar en 1 los puertos
	if(PUR){
 800119e:	7d3b      	ldrb	r3, [r7, #20]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00a      	beq.n	80011ba <GPIOx_InitAF+0xbc>
		SET_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0_0 << (Pin_ * 2)));//Resistencias Pull UP
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60da      	str	r2, [r3, #12]
	}
	else{
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
	}

}
 80011b8:	e00a      	b.n	80011d0 <GPIOx_InitAF+0xd2>
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2103      	movs	r1, #3
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	60da      	str	r2, [r3, #12]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <GPIOx_InitIO>:

void GPIOx_InitIO(GPIO_TypeDef *Port_, uint8_t Pin_, uint8_t IO, bool PUR){ //l45
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	4608      	mov	r0, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	70fb      	strb	r3, [r7, #3]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70bb      	strb	r3, [r7, #2]
 80011f2:	4613      	mov	r3, r2
 80011f4:	707b      	strb	r3, [r7, #1]
	if(IO == GPIO_MODER_OUTPUT){
 80011f6:	78bb      	ldrb	r3, [r7, #2]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d115      	bne.n	8001228 <GPIOx_InitIO+0x4c>
		CLEAR_BIT(Port_->MODER,(3 << (Pin_ * 2)));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	78fa      	ldrb	r2, [r7, #3]
 8001202:	0052      	lsls	r2, r2, #1
 8001204:	2103      	movs	r1, #3
 8001206:	fa01 f202 	lsl.w	r2, r1, r2
 800120a:	43d2      	mvns	r2, r2
 800120c:	401a      	ands	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
		SET_BIT(Port_->MODER,(GPIO_MODER_OUTPUT << (Pin_ * 2))); // Salida
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2101      	movs	r1, #1
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e00f      	b.n	8001248 <GPIOx_InitIO+0x6c>
	}
	else{
		Port_->IDR &= 0;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
		CLEAR_BIT(Port_->MODER,(0x3 << (Pin_ * 2))); // Entrada
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	78fa      	ldrb	r2, [r7, #3]
 8001238:	0052      	lsls	r2, r2, #1
 800123a:	2103      	movs	r1, #3
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	43d2      	mvns	r2, r2
 8001242:	401a      	ands	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	601a      	str	r2, [r3, #0]
	}
	if(PUR){
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00a      	beq.n	8001264 <GPIOx_InitIO+0x88>
		SET_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0_0 << (Pin_ * 2)));//Resistencias Pull UP
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60da      	str	r2, [r3, #12]
	}
	else{
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
	}
}
 8001262:	e00a      	b.n	800127a <GPIOx_InitIO+0x9e>
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2103      	movs	r1, #3
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	401a      	ands	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60da      	str	r2, [r3, #12]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <RCC_EnPort>:

void RCC_EnPort(GPIO_TypeDef *port){//L45
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	if(port == GPIOA){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001296:	d106      	bne.n	80012a6 <RCC_EnPort+0x1e>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOAEN);
 8001298:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <RCC_EnPort+0x98>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129c:	4a20      	ldr	r2, [pc, #128]	@ (8001320 <RCC_EnPort+0x98>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOEEN);
	}
	else if(port == GPIOH){
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOHEN);
	}
}
 80012a4:	e035      	b.n	8001312 <RCC_EnPort+0x8a>
	else if(port == GPIOB){
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001324 <RCC_EnPort+0x9c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d106      	bne.n	80012bc <RCC_EnPort+0x34>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOBEN);
 80012ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <RCC_EnPort+0x98>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001320 <RCC_EnPort+0x98>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80012ba:	e02a      	b.n	8001312 <RCC_EnPort+0x8a>
	else if(port == GPIOC){
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a1a      	ldr	r2, [pc, #104]	@ (8001328 <RCC_EnPort+0xa0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d106      	bne.n	80012d2 <RCC_EnPort+0x4a>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOCEN);
 80012c4:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <RCC_EnPort+0x98>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	4a15      	ldr	r2, [pc, #84]	@ (8001320 <RCC_EnPort+0x98>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80012d0:	e01f      	b.n	8001312 <RCC_EnPort+0x8a>
	else if(port == GPIOD){
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a15      	ldr	r2, [pc, #84]	@ (800132c <RCC_EnPort+0xa4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d106      	bne.n	80012e8 <RCC_EnPort+0x60>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIODEN);
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <RCC_EnPort+0x98>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <RCC_EnPort+0x98>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80012e6:	e014      	b.n	8001312 <RCC_EnPort+0x8a>
	else if(port == GPIOE){
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a11      	ldr	r2, [pc, #68]	@ (8001330 <RCC_EnPort+0xa8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d106      	bne.n	80012fe <RCC_EnPort+0x76>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOEEN);
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <RCC_EnPort+0x98>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <RCC_EnPort+0x98>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80012fc:	e009      	b.n	8001312 <RCC_EnPort+0x8a>
	else if(port == GPIOH){
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a0c      	ldr	r2, [pc, #48]	@ (8001334 <RCC_EnPort+0xac>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d105      	bne.n	8001312 <RCC_EnPort+0x8a>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOHEN);
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <RCC_EnPort+0x98>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <RCC_EnPort+0x98>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001310:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	48000400 	.word	0x48000400
 8001328:	48000800 	.word	0x48000800
 800132c:	48000c00 	.word	0x48000c00
 8001330:	48001000 	.word	0x48001000
 8001334:	48001c00 	.word	0x48001c00

08001338 <SystCLK_SetMSI>:




void SystCLK_SetMSI(uint8_t MSI_clkSel){
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	while((RCC->CR && RCC_CR_MSION) == 0);
 8001342:	bf00      	nop
 8001344:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <SystCLK_SetMSI+0x44>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0fb      	beq.n	8001344 <SystCLK_SetMSI+0xc>
	SET_BIT(RCC->CR,RCC_CR_MSIRGSEL);
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <SystCLK_SetMSI+0x44>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <SystCLK_SetMSI+0x44>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(RCC->CR,RCC_CR_MSIRANGE);
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <SystCLK_SetMSI+0x44>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a07      	ldr	r2, [pc, #28]	@ (800137c <SystCLK_SetMSI+0x44>)
 800135e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001362:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR,MSI_clkSel);
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <SystCLK_SetMSI+0x44>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	4904      	ldr	r1, [pc, #16]	@ (800137c <SystCLK_SetMSI+0x44>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40021000 	.word	0x40021000

08001380 <I2C_delay>:
#include<stdbool.h>



void I2C_delay(uint32_t T)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	while(T--);
 8001388:	bf00      	nop
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1fa      	bne.n	800138a <I2C_delay+0xa>
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <RCC_En_I2C>:


void RCC_En_I2C(I2C_TypeDef *port){
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	if(port == I2C1){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a0c      	ldr	r2, [pc, #48]	@ (80013e0 <RCC_En_I2C+0x3c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d105      	bne.n	80013c0 <RCC_En_I2C+0x1c>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_I2C1EN);
 80013b4:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <RCC_En_I2C+0x40>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b8:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <RCC_En_I2C+0x40>)
 80013ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013be:	6593      	str	r3, [r2, #88]	@ 0x58
	}
	if(port == I2C3){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <RCC_En_I2C+0x44>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d105      	bne.n	80013d4 <RCC_En_I2C+0x30>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_I2C3EN);
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <RCC_En_I2C+0x40>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013cc:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <RCC_En_I2C+0x40>)
 80013ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013d2:	6593      	str	r3, [r2, #88]	@ 0x58
	}
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40005400 	.word	0x40005400
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40005c00 	.word	0x40005c00

080013ec <I2C_Init>:




void I2C_Init(I2C_TypeDef *Port){
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(Port->CR1,I2C_CR1_PE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 0201 	bic.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	601a      	str	r2, [r3, #0]
	//CONFIGURA I2C EN Fast-mode (FM)
	SET_BIT(Port->TIMINGR,(1 << (28))); //Configura el preescalador PRESC[3:0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x9 << (0))); //Configura el SCLL del registro TIMINGR
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	f043 0209 	orr.w	r2, r3, #9
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x3 << (8))); //Configura el SCLH del registro TIMINGR
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x2 << (16))); //Configura el SDADEL del registro TIMINGR
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x3 << (20))); //Configura el SCLDEL del registro TIMINGR
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	f443 1240 	orr.w	r2, r3, #3145728	@ 0x300000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	611a      	str	r2, [r3, #16]
	//SET_BIT(Port->I2C_CR1,I2C_CR1_TXDMAEN); //Habilitar modo DMA para las transmisiones
	//SET_BIT(Port->I2C_CR1,I2C_CR1_RXDMAEN); //Habilitar modo DMA para las transmisiones
	SET_BIT(Port->CR1,I2C_CR1_ANFOFF); //Habilitar modo DMA para las transmisiones
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	601a      	str	r2, [r3, #0]
    SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	601a      	str	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <I2C_Tx_1Byte>:

void I2C_Tx_1Byte (I2C_TypeDef *Port, uint8_t Adress, uint8_t Byte_0){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
 800146c:	4613      	mov	r3, r2
 800146e:	70bb      	strb	r3, [r7, #2]
	int timeout = 1000;  // Valor de timeout ajustable
 8001470:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001474:	60fb      	str	r3, [r7, #12]
	CLEAR_BIT(Port->CR2,I2C_CR2_ADD10); //Limpiar el bit ADD10 para utilizar direccion de esclavo de 7 bits
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(Port->CR2,0xFF); // Carga la dirección del esclavo
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2,(Adress << (1))); // Carga la dirección del esclavo
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(Port->CR2, I2C_CR2_RD_WRN); //Escritura
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2,(0x01 << (16)));  //Numero de BYTES
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(Port->CR2, I2C_CR2_AUTOEND);  //Habilitar condición de stop automatica
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2, I2C_CR2_START); //Comienza transmisión
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	605a      	str	r2, [r3, #4]
	while((Port->ISR & I2C_ISR_TXIS) == 0){
 80014cc:	e005      	b.n	80014da <I2C_Tx_1Byte+0x7a>
	    if(--timeout == 0) {
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <I2C_Tx_1Byte+0x88>
	while((Port->ISR & I2C_ISR_TXIS) == 0){
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f3      	beq.n	80014ce <I2C_Tx_1Byte+0x6e>
 80014e6:	e000      	b.n	80014ea <I2C_Tx_1Byte+0x8a>
	        // Gestionar el error: puede reiniciar el bus o informar un error
	        break;
 80014e8:	bf00      	nop
	    }
	}
	Port->TXDR = Byte_0;
 80014ea:	78ba      	ldrb	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	629a      	str	r2, [r3, #40]	@ 0x28
	I2C_delay(50);
 80014f0:	2032      	movs	r0, #50	@ 0x32
 80014f2:	f7ff ff45 	bl	8001380 <I2C_delay>
	//SET_BIT(Port->I2C_CR2, I2C_CR2_STOP); //Condicion de stop
	SET_BIT(Port->ICR, I2C_ICR_STOPCF); //Limpia bandaera de deteccion de condicion de stop
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f043 0220 	orr.w	r2, r3, #32
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	61da      	str	r2, [r3, #28]
	CLEAR_BIT(Port->CR1,I2C_CR1_PE); //Deshabilita bit PE del registro CR1 para desactivar el periferico
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 0201 	bic.w	r2, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	601a      	str	r2, [r3, #0]
	SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1 para activar el periferico
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	601a      	str	r2, [r3, #0]

}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <I2C_Rx_1Byte>:

int16_t I2C_Rx_1Byte (I2C_TypeDef *Port, uint8_t Adress){
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	70fb      	strb	r3, [r7, #3]
	int timeout = 1000;  // Valor de timeout ajustable
 800152e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001532:	60fb      	str	r3, [r7, #12]
	int16_t ACEL_XOUT;
	uint8_t ACCEL_XOUT_H;
	uint8_t ACCEL_XOUT_L;
	CLEAR_BIT(Port->CR2,I2C_CR2_ADD10); //Limpiar el bit ADD10 para utilizar direccion de esclavo de 7 bits
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2,I2C_CR2_HEAD10R); //Limpiar el bit ADD10 para utilizar direccion de esclavo de 7 bits
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(Port->CR2,0xFF); // Carga la dirección del esclavo
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2,(Adress << (1))); // Carga la dirección del esclavo
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2, I2C_CR2_RD_WRN); //lectura
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2,(0x02 << (16)));  //Numero de BYTES
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(Port->CR2,I2C_CR2_AUTOEND);  //Habilitar condición de stop automatica
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2, I2C_CR2_START); //Comienza transmisión
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	605a      	str	r2, [r3, #4]

	while((Port->ISR & I2C_ISR_RXNE) == 0){
 8001596:	e005      	b.n	80015a4 <I2C_Rx_1Byte+0x82>
	    if(--timeout == 0) {
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3b01      	subs	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <I2C_Rx_1Byte+0x90>
	while((Port->ISR & I2C_ISR_RXNE) == 0){
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f3      	beq.n	8001598 <I2C_Rx_1Byte+0x76>
 80015b0:	e000      	b.n	80015b4 <I2C_Rx_1Byte+0x92>
	        // Gestionar el error: puede reiniciar el bus o informar un error
	        break;
 80015b2:	bf00      	nop
	    }
	}
	timeout = 1000;
 80015b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b8:	60fb      	str	r3, [r7, #12]
	ACCEL_XOUT_H=Port->RXDR;  //Leo valor que envia MPU
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	72fb      	strb	r3, [r7, #11]
	I2C_delay(100);
 80015c0:	2064      	movs	r0, #100	@ 0x64
 80015c2:	f7ff fedd 	bl	8001380 <I2C_delay>
	while((Port->ISR & I2C_ISR_RXNE) == 0){
 80015c6:	e005      	b.n	80015d4 <I2C_Rx_1Byte+0xb2>
	    if(--timeout == 0) {
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <I2C_Rx_1Byte+0xc0>
	while((Port->ISR & I2C_ISR_RXNE) == 0){
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f3      	beq.n	80015c8 <I2C_Rx_1Byte+0xa6>
 80015e0:	e000      	b.n	80015e4 <I2C_Rx_1Byte+0xc2>
	        // Gestionar el error: puede reiniciar el bus o informar un error
	        break;
 80015e2:	bf00      	nop
	    }
	}
	timeout = 1000;
 80015e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e8:	60fb      	str	r3, [r7, #12]
	ACCEL_XOUT_L=Port->RXDR;  //Leo valor que envia MPU
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	72bb      	strb	r3, [r7, #10]
	I2C_delay(100);
 80015f0:	2064      	movs	r0, #100	@ 0x64
 80015f2:	f7ff fec5 	bl	8001380 <I2C_delay>
	SET_BIT(Port->CR2, I2C_CR2_STOP); //Condicion de stop
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->ICR, I2C_ICR_STOPCF); //Limpia bandaera de deteccion de condicion de stop
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f043 0220 	orr.w	r2, r3, #32
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	61da      	str	r2, [r3, #28]
	SET_BIT(Port->ICR, I2C_ICR_NACKCF); //Limpia bandaera de deteccion de condicion de stop
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f043 0210 	orr.w	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	61da      	str	r2, [r3, #28]
	CLEAR_BIT(Port->CR1,I2C_CR1_PE); //Deshabilita bit PE del registro CR1 para desactivar el periferico
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 0201 	bic.w	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	601a      	str	r2, [r3, #0]
	SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1 para activar el periferico
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]
	ACEL_XOUT = ACCEL_XOUT_H <<8 |ACCEL_XOUT_L;
 8001632:	7afb      	ldrb	r3, [r7, #11]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	7abb      	ldrb	r3, [r7, #10]
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	813b      	strh	r3, [r7, #8]
	return ACEL_XOUT;
 8001640:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <I2C_Tx_2Bytes>:

void I2C_Tx_2Bytes (I2C_TypeDef *Port, uint8_t Adress, uint8_t Byte_0, uint8_t Byte_1){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	4608      	mov	r0, r1
 8001656:	4611      	mov	r1, r2
 8001658:	461a      	mov	r2, r3
 800165a:	4603      	mov	r3, r0
 800165c:	70fb      	strb	r3, [r7, #3]
 800165e:	460b      	mov	r3, r1
 8001660:	70bb      	strb	r3, [r7, #2]
 8001662:	4613      	mov	r3, r2
 8001664:	707b      	strb	r3, [r7, #1]
CLEAR_BIT(Port->CR2,I2C_CR2_ADD10); //Limpiar el bit ADD10 para utilizar direccion de esclavo de 7 bits
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	605a      	str	r2, [r3, #4]
CLEAR_BIT(Port->CR2,0xFF); // Carga la dirección del esclavo
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	605a      	str	r2, [r3, #4]
SET_BIT(Port->CR2,(Adress << (1))); // Carga la dirección del esclavo
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	605a      	str	r2, [r3, #4]
CLEAR_BIT(Port->CR2, I2C_CR2_RD_WRN); //Escritura
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	605a      	str	r2, [r3, #4]
SET_BIT(Port->CR2,(0x02 << (16)));  //Numero de BYTES
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	605a      	str	r2, [r3, #4]
CLEAR_BIT(Port->CR2, I2C_CR2_AUTOEND);  //Habilitar condición de stop automatica
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	605a      	str	r2, [r3, #4]
SET_BIT(Port->CR2, I2C_CR2_START); //Comienza transmisión
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	605a      	str	r2, [r3, #4]
while((Port->ISR&I2C_ISR_TXIS)==0){};
 80016bc:	bf00      	nop
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f9      	beq.n	80016be <I2C_Tx_2Bytes+0x72>
Port->TXDR = Byte_0;
 80016ca:	78ba      	ldrb	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
I2C_delay(100);
 80016d0:	2064      	movs	r0, #100	@ 0x64
 80016d2:	f7ff fe55 	bl	8001380 <I2C_delay>
while((Port->ISR&I2C_ISR_TXIS)==0){};
 80016d6:	bf00      	nop
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f9      	beq.n	80016d8 <I2C_Tx_2Bytes+0x8c>
Port->TXDR = Byte_1;
 80016e4:	787a      	ldrb	r2, [r7, #1]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	629a      	str	r2, [r3, #40]	@ 0x28
I2C_delay(100);
 80016ea:	2064      	movs	r0, #100	@ 0x64
 80016ec:	f7ff fe48 	bl	8001380 <I2C_delay>
SET_BIT(Port->CR2, I2C_CR2_STOP); //Condicion de stop
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	605a      	str	r2, [r3, #4]
SET_BIT(Port->ICR, I2C_ICR_STOPCF); //Limpia bandaera de deteccion de condicion de stop
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	f043 0220 	orr.w	r2, r3, #32
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	61da      	str	r2, [r3, #28]
CLEAR_BIT(Port->CR1,I2C_CR1_PE); //Deshabilita bit PE del registro CR1 para desactivar el periferico
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 0201 	bic.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	601a      	str	r2, [r3, #0]
SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1 para activar el periferico
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <NVIC_Enable>:
 *  Created on: Oct 31, 2024
 *      Author: joshu
 */
#include "NVIC.h"

void NVIC_Enable(uint32_t irq_num, uint8_t priority) {
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
    if (irq_num >= 84) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b53      	cmp	r3, #83	@ 0x53
 8001738:	d81a      	bhi.n	8001770 <NVIC_Enable+0x48>
        // El número de interrupción es inválido, dado que el microcontrolador solo tiene 84 interrupciones
        return;
    }

    // Calcular el índice del registro ISER y el bit correspondiente
    uint32_t iser_index = irq_num / 32;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	60fb      	str	r3, [r7, #12]
    uint32_t iser_bit = irq_num % 32;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	60bb      	str	r3, [r7, #8]

    // Activar la interrupción correspondiente en NVIC_ISER
    NVIC->ISER[iser_index] = (1 << iser_bit);
 8001748:	2201      	movs	r2, #1
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <NVIC_Enable+0x54>)
 8001752:	4619      	mov	r1, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Configurar la prioridad en el registro NVIC_IPR
    NVIC->IP[irq_num] = (priority & 0xF) << 4; // La prioridad usa 4 bits más significativos
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4a07      	ldr	r2, [pc, #28]	@ (800177c <NVIC_Enable+0x54>)
 8001760:	b2d9      	uxtb	r1, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800176a:	460a      	mov	r2, r1
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	e000      	b.n	8001772 <NVIC_Enable+0x4a>
        return;
 8001770:	bf00      	nop

    // La función no limpia en ICER, pero si quieres limpiar el bit usa:
    // NVIC->ICER[iser_index] = (1 << iser_bit); // Esto es opcional si necesitas desactivar
}
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db0c      	blt.n	80017ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	4907      	ldr	r1, [pc, #28]	@ (80017b8 <__NVIC_ClearPendingIRQ+0x38>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	2001      	movs	r0, #1
 80017a2:	fa00 f202 	lsl.w	r2, r0, r2
 80017a6:	3360      	adds	r3, #96	@ 0x60
 80017a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100

080017bc <MPU6050_Init>:
void MPU6050_Init(void);


int16_t MPU6050_Read(uint8_t Register);

void MPU6050_Init(void){
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_PWR_MGMT_1, 0x00);
 80017c0:	2300      	movs	r3, #0
 80017c2:	226b      	movs	r2, #107	@ 0x6b
 80017c4:	2168      	movs	r1, #104	@ 0x68
 80017c6:	4814      	ldr	r0, [pc, #80]	@ (8001818 <MPU6050_Init+0x5c>)
 80017c8:	f7ff ff40 	bl	800164c <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_ACCEL_CONFIG, 0X00); //Configura el acelerometro a +-4g
 80017cc:	2300      	movs	r3, #0
 80017ce:	221c      	movs	r2, #28
 80017d0:	2168      	movs	r1, #104	@ 0x68
 80017d2:	4811      	ldr	r0, [pc, #68]	@ (8001818 <MPU6050_Init+0x5c>)
 80017d4:	f7ff ff3a 	bl	800164c <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_GYRO_CONFIG, 0X00); //Configura giroscopio a +- 250°/s
 80017d8:	2300      	movs	r3, #0
 80017da:	221b      	movs	r2, #27
 80017dc:	2168      	movs	r1, #104	@ 0x68
 80017de:	480e      	ldr	r0, [pc, #56]	@ (8001818 <MPU6050_Init+0x5c>)
 80017e0:	f7ff ff34 	bl	800164c <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, 0x19, 0X07);
 80017e4:	2307      	movs	r3, #7
 80017e6:	2219      	movs	r2, #25
 80017e8:	2168      	movs	r1, #104	@ 0x68
 80017ea:	480b      	ldr	r0, [pc, #44]	@ (8001818 <MPU6050_Init+0x5c>)
 80017ec:	f7ff ff2e 	bl	800164c <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_CONFIG, 0x01);
 80017f0:	2301      	movs	r3, #1
 80017f2:	221a      	movs	r2, #26
 80017f4:	2168      	movs	r1, #104	@ 0x68
 80017f6:	4808      	ldr	r0, [pc, #32]	@ (8001818 <MPU6050_Init+0x5c>)
 80017f8:	f7ff ff28 	bl	800164c <I2C_Tx_2Bytes>
    //I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_CONFIG, 0x01);
   // I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_ACCEL_CONFIG, 0X00);
    //I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_FIFO_EN, 0XFF);
     I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_FIFO_EN, 0xFF);
 80017fc:	23ff      	movs	r3, #255	@ 0xff
 80017fe:	2223      	movs	r2, #35	@ 0x23
 8001800:	2168      	movs	r1, #104	@ 0x68
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MPU6050_Init+0x5c>)
 8001804:	f7ff ff22 	bl	800164c <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_USER_CTRL, 0x40);
 8001808:	2340      	movs	r3, #64	@ 0x40
 800180a:	226a      	movs	r2, #106	@ 0x6a
 800180c:	2168      	movs	r1, #104	@ 0x68
 800180e:	4802      	ldr	r0, [pc, #8]	@ (8001818 <MPU6050_Init+0x5c>)
 8001810:	f7ff ff1c 	bl	800164c <I2C_Tx_2Bytes>




}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40005c00 	.word	0x40005c00

0800181c <MPU6050_Read>:

int16_t MPU6050_Read(uint8_t Register){
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
	int16_t Data;
I2C_Tx_1Byte (I2C3, AddressMPU6050, Register);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	461a      	mov	r2, r3
 800182a:	2168      	movs	r1, #104	@ 0x68
 800182c:	4807      	ldr	r0, [pc, #28]	@ (800184c <MPU6050_Read+0x30>)
 800182e:	f7ff fe17 	bl	8001460 <I2C_Tx_1Byte>
Data = I2C_Rx_1Byte(I2C3, AddressMPU6050);
 8001832:	2168      	movs	r1, #104	@ 0x68
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <MPU6050_Read+0x30>)
 8001836:	f7ff fe74 	bl	8001522 <I2C_Rx_1Byte>
 800183a:	4603      	mov	r3, r0
 800183c:	81fb      	strh	r3, [r7, #14]

//I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_USER_CTRL, 0x04);
//I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_FIFO_EN, 0x08);
//I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_USER_CTRL, 0x40);

return Data;
 800183e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40005c00 	.word	0x40005c00

08001850 <main>:
/*********FIN DE VARIABLES GLOBALES ************/
CAN_FIFOMailBox_TypeDef *FIFOmailBox0,*FIFOmailBox1;


int main(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af02      	add	r7, sp, #8
	Init_Peripheral();
 8001856:	f000 f881 	bl	800195c <Init_Peripheral>
	Conf_Peripheral();
 800185a:	f000 f89b 	bl	8001994 <Conf_Peripheral>
    //SSD1306_Init(); //Funcion para configurar la pantalla
    //SSD1306_Clear(); //Funcion para limpiar la pantalla
    MPU6050_Init(); //INICIALIZAR Y CONFIGURAR REGISTROSD EL MPU6050
 800185e:	f7ff ffad 	bl	80017bc <MPU6050_Init>
    //SecuanciaInicio(); //Secuencia de la interfaz de usuario - inicio
    //I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE0);
	//CONFIGURAR FILTROS

	NVIC_Enable(CAN1_RX0_IRQn, 4);
 8001862:	2104      	movs	r1, #4
 8001864:	2014      	movs	r0, #20
 8001866:	f7ff ff5f 	bl	8001728 <NVIC_Enable>
	NVIC_Enable(CAN1_RX1_IRQn, 5);
 800186a:	2105      	movs	r1, #5
 800186c:	2015      	movs	r0, #21
 800186e:	f7ff ff5b 	bl	8001728 <NVIC_Enable>
	CANx_EnFIFO0Ints(CAN1);
 8001872:	4833      	ldr	r0, [pc, #204]	@ (8001940 <main+0xf0>)
 8001874:	f7ff fb27 	bl	8000ec6 <CANx_EnFIFO0Ints>
	CANx_EnFIFO1Ints(CAN1);
 8001878:	4831      	ldr	r0, [pc, #196]	@ (8001940 <main+0xf0>)
 800187a:	f7ff fb14 	bl	8000ea6 <CANx_EnFIFO1Ints>
    CAN_FilterInit (CAN1, List_mode, Single_32bit, Fifo_0, 0x00); //CAN1, Mode , Scale, FIFO, Localidad
 800187e:	2300      	movs	r3, #0
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	2201      	movs	r2, #1
 8001886:	2101      	movs	r1, #1
 8001888:	482d      	ldr	r0, [pc, #180]	@ (8001940 <main+0xf0>)
 800188a:	f7ff f972 	bl	8000b72 <CAN_FilterInit>
    CAN_SetFilterValue(CAN1, 0x7E8, 0x7E8, 0x00);  //CAN1, ID , MSK, Localidad
 800188e:	2300      	movs	r3, #0
 8001890:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 8001894:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8001898:	4829      	ldr	r0, [pc, #164]	@ (8001940 <main+0xf0>)
 800189a:	f7ff f9f3 	bl	8000c84 <CAN_SetFilterValue>

    //CONFIGURAR MAILBOXS
    CAN_MailboxConfig(CAN1, false, 0x7DF, false, 0x0); //CAN1, ExtededID, IDE, RTR, Localidad
 800189e:	2300      	movs	r3, #0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2300      	movs	r3, #0
 80018a4:	f240 72df 	movw	r2, #2015	@ 0x7df
 80018a8:	2100      	movs	r1, #0
 80018aa:	4825      	ldr	r0, [pc, #148]	@ (8001940 <main+0xf0>)
 80018ac:	f7ff fa43 	bl	8000d36 <CAN_MailboxConfig>
    CAN_SendData(CAN1, 8, 0x00000000000D0102, 0x0); //CAN1, DLC , DATA, Localidad
 80018b0:	2300      	movs	r3, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	4a23      	ldr	r2, [pc, #140]	@ (8001944 <main+0xf4>)
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	2108      	movs	r1, #8
 80018bc:	4820      	ldr	r0, [pc, #128]	@ (8001940 <main+0xf0>)
 80018be:	f7ff fa91 	bl	8000de4 <CAN_SendData>

    //CONFIGURAR MAILBOXS
    CAN_MailboxConfig(CAN1, false, 0x7DF, false, 0x1); //CAN1, ExtededID, IDE, RTR, Localidad
 80018c2:	2301      	movs	r3, #1
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2300      	movs	r3, #0
 80018c8:	f240 72df 	movw	r2, #2015	@ 0x7df
 80018cc:	2100      	movs	r1, #0
 80018ce:	481c      	ldr	r0, [pc, #112]	@ (8001940 <main+0xf0>)
 80018d0:	f7ff fa31 	bl	8000d36 <CAN_MailboxConfig>
    CAN_SendData(CAN1, 8, 0x00000000002F0102, 0x1); //CAN1, DLC , DATA, Localidad
 80018d4:	2301      	movs	r3, #1
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001948 <main+0xf8>)
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	2108      	movs	r1, #8
 80018e0:	4817      	ldr	r0, [pc, #92]	@ (8001940 <main+0xf0>)
 80018e2:	f7ff fa7f 	bl	8000de4 <CAN_SendData>
   // CAN_RequestTransmission(CAN1, 0x00);


    while (!(GPIOC->IDR & GPIO_IDR_IDR_2)) {
 80018e6:	e008      	b.n	80018fa <main+0xaa>
        //CAN_RequestTransmission(CAN1, 0x00);
        GPIOC->ODR ^= GPIO_ODR_ODR_13;
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <main+0xfc>)
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	4a17      	ldr	r2, [pc, #92]	@ (800194c <main+0xfc>)
 80018ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80018f2:	6153      	str	r3, [r2, #20]
	    delay(300000);
 80018f4:	4816      	ldr	r0, [pc, #88]	@ (8001950 <main+0x100>)
 80018f6:	f000 f965 	bl	8001bc4 <delay>
    while (!(GPIOC->IDR & GPIO_IDR_IDR_2)) {
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <main+0xfc>)
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <main+0x98>
        // Se queda en este bucle mientras el botón está en 0 (no presionado)
    }

	 while (1){

		if (GPIOC->IDR & GPIO_IDR_IDR_2){
 8001906:	4b11      	ldr	r3, [pc, #68]	@ (800194c <main+0xfc>)
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <main+0xd6>
	    		    CLEAR_BIT(GPIOC->ODR, GPIO_ODR_ODR_13);
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <main+0xfc>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <main+0xfc>)
 8001918:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800191c:	6153      	str	r3, [r2, #20]
	    	     //   CAN_RequestTransmission(CAN1, 0x01);
	    			delay(200000);
 800191e:	480d      	ldr	r0, [pc, #52]	@ (8001954 <main+0x104>)
 8001920:	f000 f950 	bl	8001bc4 <delay>
 8001924:	e007      	b.n	8001936 <main+0xe6>
		 }
	 else {
		 GPIOC->ODR ^= GPIO_ODR_ODR_13;
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <main+0xfc>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	4a08      	ldr	r2, [pc, #32]	@ (800194c <main+0xfc>)
 800192c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001930:	6153      	str	r3, [r2, #20]
		 MPU6050_Read_Ace_Giro();
 8001932:	f000 f881 	bl	8001a38 <MPU6050_Read_Ace_Giro>
	 }
		delay(150000);
 8001936:	4808      	ldr	r0, [pc, #32]	@ (8001958 <main+0x108>)
 8001938:	f000 f944 	bl	8001bc4 <delay>
		if (GPIOC->IDR & GPIO_IDR_IDR_2){
 800193c:	e7e3      	b.n	8001906 <main+0xb6>
 800193e:	bf00      	nop
 8001940:	40006400 	.word	0x40006400
 8001944:	000d0102 	.word	0x000d0102
 8001948:	002f0102 	.word	0x002f0102
 800194c:	48000800 	.word	0x48000800
 8001950:	000493e0 	.word	0x000493e0
 8001954:	00030d40 	.word	0x00030d40
 8001958:	000249f0 	.word	0x000249f0

0800195c <Init_Peripheral>:
 }




void Init_Peripheral(void){
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	  /*CONFIGURACIÓN DEL RELOJ*/
	  SystCLK_SetMSI(MSI_16MHz); //Configura 16MHz como  reloj
 8001960:	2080      	movs	r0, #128	@ 0x80
 8001962:	f7ff fce9 	bl	8001338 <SystCLK_SetMSI>
	  RCC_EnPort(GPIOB);//configura reloj en puerto B Para CANX
 8001966:	4807      	ldr	r0, [pc, #28]	@ (8001984 <Init_Peripheral+0x28>)
 8001968:	f7ff fc8e 	bl	8001288 <RCC_EnPort>
	  //RCC_EnPort(GPIOD);//configura reloj en puerto D PUERTO PARA SALIDA DIGITAL - CONMUTA UN TRANSISTOR PARA ALIMENTAR UN LED
	  RCC_EnPort(GPIOC);//configura reloj en puerto C para I2C
 800196c:	4806      	ldr	r0, [pc, #24]	@ (8001988 <Init_Peripheral+0x2c>)
 800196e:	f7ff fc8b 	bl	8001288 <RCC_EnPort>

	  RCC_En_I2C(I2C3); // Habilitar reloj al periférico I2C.
 8001972:	4806      	ldr	r0, [pc, #24]	@ (800198c <Init_Peripheral+0x30>)
 8001974:	f7ff fd16 	bl	80013a4 <RCC_En_I2C>
	  RCC_En_CANx(CAN1);// Habilitar reloj al periferico CAN
 8001978:	4805      	ldr	r0, [pc, #20]	@ (8001990 <Init_Peripheral+0x34>)
 800197a:	f7ff f84b 	bl	8000a14 <RCC_En_CANx>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	48000400 	.word	0x48000400
 8001988:	48000800 	.word	0x48000800
 800198c:	40005c00 	.word	0x40005c00
 8001990:	40006400 	.word	0x40006400

08001994 <Conf_Peripheral>:

void Conf_Peripheral(void){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af02      	add	r7, sp, #8
	  GPIOx_InitIO(GPIOC, 2, GPIO_MODER_INPUT, false);
 800199a:	2300      	movs	r3, #0
 800199c:	2200      	movs	r2, #0
 800199e:	2102      	movs	r1, #2
 80019a0:	4821      	ldr	r0, [pc, #132]	@ (8001a28 <Conf_Peripheral+0x94>)
 80019a2:	f7ff fc1b 	bl	80011dc <GPIOx_InitIO>
	  //GPIOx_InitIO(GPIOB, 8, GPIO_MODER_OUTPUT, false);
	  GPIOx_InitAF(GPIOC, 0, 1, 2, 4, false); /*Puerto C / PIN 0 / Configura Open Drain / High speed /  Función alterna 4 - I2C3_SCL / Habilita Resistencia de Pull -Up  */
 80019a6:	2300      	movs	r3, #0
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	2304      	movs	r3, #4
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2302      	movs	r3, #2
 80019b0:	2201      	movs	r2, #1
 80019b2:	2100      	movs	r1, #0
 80019b4:	481c      	ldr	r0, [pc, #112]	@ (8001a28 <Conf_Peripheral+0x94>)
 80019b6:	f7ff fba2 	bl	80010fe <GPIOx_InitAF>
	  GPIOx_InitAF(GPIOC, 1, 1, 2, 4, false); /*Puerto C / PIN 1 / Configura Open Drain / High speed /  Función alterna 4 - I2C3_SDA / Habilita Resistencia de Pull -Up  */
 80019ba:	2300      	movs	r3, #0
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	2304      	movs	r3, #4
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2302      	movs	r3, #2
 80019c4:	2201      	movs	r2, #1
 80019c6:	2101      	movs	r1, #1
 80019c8:	4817      	ldr	r0, [pc, #92]	@ (8001a28 <Conf_Peripheral+0x94>)
 80019ca:	f7ff fb98 	bl	80010fe <GPIOx_InitAF>
	  //inicializa funcion alterna para CAN1 RX en pin B8
	  GPIOx_InitAF(GPIOB, 8, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, 9 , false); /*Puerto B / PIN 0 / Configura Push Pull / High speed /  Función alterna 9 - CAN1_RX / Habilita Resistencia de Pull -Up  */
 80019ce:	2300      	movs	r3, #0
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	2309      	movs	r3, #9
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2303      	movs	r3, #3
 80019d8:	2200      	movs	r2, #0
 80019da:	2108      	movs	r1, #8
 80019dc:	4813      	ldr	r0, [pc, #76]	@ (8001a2c <Conf_Peripheral+0x98>)
 80019de:	f7ff fb8e 	bl	80010fe <GPIOx_InitAF>
	  //inicializa funcion alterna para CAN1 TX en pin B9
	  GPIOx_InitIO(GPIOC, 13, GPIO_MODER_OUTPUT, false);
 80019e2:	2300      	movs	r3, #0
 80019e4:	2201      	movs	r2, #1
 80019e6:	210d      	movs	r1, #13
 80019e8:	480f      	ldr	r0, [pc, #60]	@ (8001a28 <Conf_Peripheral+0x94>)
 80019ea:	f7ff fbf7 	bl	80011dc <GPIOx_InitIO>
	  GPIOx_InitAF(GPIOB, 9, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, 9 , false); /*Puerto B / PIN 0 / Configura Push Pull / High speed /  Función alterna 9 - CAN1_TX / Habilita Resistencia de Pull -Up  */
 80019ee:	2300      	movs	r3, #0
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	2309      	movs	r3, #9
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2303      	movs	r3, #3
 80019f8:	2200      	movs	r2, #0
 80019fa:	2109      	movs	r1, #9
 80019fc:	480b      	ldr	r0, [pc, #44]	@ (8001a2c <Conf_Peripheral+0x98>)
 80019fe:	f7ff fb7e 	bl	80010fe <GPIOx_InitAF>
	  I2C_Init(I2C3);
 8001a02:	480b      	ldr	r0, [pc, #44]	@ (8001a30 <Conf_Peripheral+0x9c>)
 8001a04:	f7ff fcf2 	bl	80013ec <I2C_Init>
	  CANx_Init(CAN1);
 8001a08:	480a      	ldr	r0, [pc, #40]	@ (8001a34 <Conf_Peripheral+0xa0>)
 8001a0a:	f7ff f81b 	bl	8000a44 <CANx_Init>
	  CANx_BitTiming_500Kz(CAN1);
 8001a0e:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <Conf_Peripheral+0xa0>)
 8001a10:	f7ff f879 	bl	8000b06 <CANx_BitTiming_500Kz>
	  CLEAR_BIT(CAN1->MCR, CAN_MCR_INRQ);//limpia bandera de modo inicialización
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <Conf_Peripheral+0xa0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a06      	ldr	r2, [pc, #24]	@ (8001a34 <Conf_Peripheral+0xa0>)
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	6013      	str	r3, [r2, #0]
	 // CAN_RequestTransmission(CAN1, 0x00);
  //  while(CAN1->MSR & CAN_MSR_INAK) {}; //Esperamos a que el bit CAN_MSR_INAK se limpie ****ENTRA
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	48000800 	.word	0x48000800
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	40005c00 	.word	0x40005c00
 8001a34:	40006400 	.word	0x40006400

08001a38 <MPU6050_Read_Ace_Giro>:

void MPU6050_Read_Ace_Giro(void){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	  AC_X =  MPU6050_Read(MPU6050_ACCEL_XOUT_H);
 8001a3c:	203b      	movs	r0, #59	@ 0x3b
 8001a3e:	f7ff feed 	bl	800181c <MPU6050_Read>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b52      	ldr	r3, [pc, #328]	@ (8001b90 <MPU6050_Read_Ace_Giro+0x158>)
 8001a48:	801a      	strh	r2, [r3, #0]
	  AX=(AC_X/16384.0);
 8001a4a:	4b51      	ldr	r3, [pc, #324]	@ (8001b90 <MPU6050_Read_Ace_Giro+0x158>)
 8001a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd13 	bl	800047c <__aeabi_i2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b94 <MPU6050_Read_Ace_Giro+0x15c>)
 8001a5c:	f7fe fea2 	bl	80007a4 <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7fe ff84 	bl	8000974 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b98 <MPU6050_Read_Ace_Giro+0x160>)
 8001a70:	6013      	str	r3, [r2, #0]
	  AC_Y =  MPU6050_Read(MPU6050_ACCEL_YOUT_H);
 8001a72:	203d      	movs	r0, #61	@ 0x3d
 8001a74:	f7ff fed2 	bl	800181c <MPU6050_Read>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <MPU6050_Read_Ace_Giro+0x164>)
 8001a7e:	801a      	strh	r2, [r3, #0]
	  AY=(AC_Y/16384.0);
 8001a80:	4b46      	ldr	r3, [pc, #280]	@ (8001b9c <MPU6050_Read_Ace_Giro+0x164>)
 8001a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fcf8 	bl	800047c <__aeabi_i2d>
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b40      	ldr	r3, [pc, #256]	@ (8001b94 <MPU6050_Read_Ace_Giro+0x15c>)
 8001a92:	f7fe fe87 	bl	80007a4 <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7fe ff69 	bl	8000974 <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba0 <MPU6050_Read_Ace_Giro+0x168>)
 8001aa6:	6013      	str	r3, [r2, #0]
	  AC_Z =  MPU6050_Read(MPU6050_ACCEL_ZOUT_H);
 8001aa8:	203f      	movs	r0, #63	@ 0x3f
 8001aaa:	f7ff feb7 	bl	800181c <MPU6050_Read>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <MPU6050_Read_Ace_Giro+0x16c>)
 8001ab4:	801a      	strh	r2, [r3, #0]
	  AZ=(AC_Z/16384.0);
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <MPU6050_Read_Ace_Giro+0x16c>)
 8001ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fcdd 	bl	800047c <__aeabi_i2d>
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b33      	ldr	r3, [pc, #204]	@ (8001b94 <MPU6050_Read_Ace_Giro+0x15c>)
 8001ac8:	f7fe fe6c 	bl	80007a4 <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7fe ff4e 	bl	8000974 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a33      	ldr	r2, [pc, #204]	@ (8001ba8 <MPU6050_Read_Ace_Giro+0x170>)
 8001adc:	6013      	str	r3, [r2, #0]
	  G_X =  MPU6050_Read(MPU6050_GYRO_XOUT_H);
 8001ade:	2043      	movs	r0, #67	@ 0x43
 8001ae0:	f7ff fe9c 	bl	800181c <MPU6050_Read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b30      	ldr	r3, [pc, #192]	@ (8001bac <MPU6050_Read_Ace_Giro+0x174>)
 8001aea:	801a      	strh	r2, [r3, #0]
	  GX=(G_X/131.0);
 8001aec:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <MPU6050_Read_Ace_Giro+0x174>)
 8001aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fcc2 	bl	800047c <__aeabi_i2d>
 8001af8:	a323      	add	r3, pc, #140	@ (adr r3, 8001b88 <MPU6050_Read_Ace_Giro+0x150>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fe51 	bl	80007a4 <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7fe ff33 	bl	8000974 <__aeabi_d2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a27      	ldr	r2, [pc, #156]	@ (8001bb0 <MPU6050_Read_Ace_Giro+0x178>)
 8001b12:	6013      	str	r3, [r2, #0]
	  G_Y =  MPU6050_Read(MPU6050_GYRO_YOUT_H);
 8001b14:	2045      	movs	r0, #69	@ 0x45
 8001b16:	f7ff fe81 	bl	800181c <MPU6050_Read>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <MPU6050_Read_Ace_Giro+0x17c>)
 8001b20:	801a      	strh	r2, [r3, #0]
	  GY=(G_Y/131.0);
 8001b22:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <MPU6050_Read_Ace_Giro+0x17c>)
 8001b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fca7 	bl	800047c <__aeabi_i2d>
 8001b2e:	a316      	add	r3, pc, #88	@ (adr r3, 8001b88 <MPU6050_Read_Ace_Giro+0x150>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fe36 	bl	80007a4 <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7fe ff18 	bl	8000974 <__aeabi_d2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb8 <MPU6050_Read_Ace_Giro+0x180>)
 8001b48:	6013      	str	r3, [r2, #0]
	  G_Z = MPU6050_Read(MPU6050_GYRO_ZOUT_H);
 8001b4a:	2047      	movs	r0, #71	@ 0x47
 8001b4c:	f7ff fe66 	bl	800181c <MPU6050_Read>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <MPU6050_Read_Ace_Giro+0x184>)
 8001b56:	801a      	strh	r2, [r3, #0]
	  GZ=(G_Z/131.0);
 8001b58:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <MPU6050_Read_Ace_Giro+0x184>)
 8001b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc8c 	bl	800047c <__aeabi_i2d>
 8001b64:	a308      	add	r3, pc, #32	@ (adr r3, 8001b88 <MPU6050_Read_Ace_Giro+0x150>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fe1b 	bl	80007a4 <__aeabi_ddiv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7fe fefd 	bl	8000974 <__aeabi_d2f>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <MPU6050_Read_Ace_Giro+0x188>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	f3af 8000 	nop.w
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	40606000 	.word	0x40606000
 8001b90:	2000001c 	.word	0x2000001c
 8001b94:	40d00000 	.word	0x40d00000
 8001b98:	20000024 	.word	0x20000024
 8001b9c:	2000001e 	.word	0x2000001e
 8001ba0:	20000028 	.word	0x20000028
 8001ba4:	20000020 	.word	0x20000020
 8001ba8:	2000002c 	.word	0x2000002c
 8001bac:	20000030 	.word	0x20000030
 8001bb0:	20000038 	.word	0x20000038
 8001bb4:	20000032 	.word	0x20000032
 8001bb8:	2000003c 	.word	0x2000003c
 8001bbc:	20000034 	.word	0x20000034
 8001bc0:	20000040 	.word	0x20000040

08001bc4 <delay>:
	  SSD1306_Clear();
}


void delay(uint32_t n)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	while(n--);
 8001bcc:	bf00      	nop
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1fa      	bne.n	8001bce <delay+0xa>
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <CAN1_RX0_IRQHandler>:


void CAN1_RX0_IRQHandler(){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(CAN1_RX0_IRQn);
 8001bec:	2014      	movs	r0, #20
 8001bee:	f7ff fdc7 	bl	8001780 <__NVIC_ClearPendingIRQ>
	CAN1_Rx0_FIFOx (CAN1, FIFOmailBox0);
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <CAN1_RX0_IRQHandler+0x1c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4803      	ldr	r0, [pc, #12]	@ (8001c08 <CAN1_RX0_IRQHandler+0x20>)
 8001bfa:	f7ff f986 	bl	8000f0a <CAN1_Rx0_FIFOx>

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000044 	.word	0x20000044
 8001c08:	40006400 	.word	0x40006400

08001c0c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
     NVIC_ClearPendingIRQ(CAN1_RX1_IRQn);
 8001c10:	2015      	movs	r0, #21
 8001c12:	f7ff fdb5 	bl	8001780 <__NVIC_ClearPendingIRQ>
     CAN1_Rx1_FIFOx (CAN1, FIFOmailBox1);
 8001c16:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <CAN1_RX1_IRQHandler+0x1c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <CAN1_RX1_IRQHandler+0x20>)
 8001c1e:	f7ff f9f1 	bl	8001004 <CAN1_Rx1_FIFOx>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000048 	.word	0x20000048
 8001c2c:	40006400 	.word	0x40006400

08001c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <SystemInit+0x20>)
 8001c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c3a:	4a05      	ldr	r2, [pc, #20]	@ (8001c50 <SystemInit+0x20>)
 8001c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c54:	480d      	ldr	r0, [pc, #52]	@ (8001c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c58:	f7ff ffea 	bl	8001c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c5c:	480c      	ldr	r0, [pc, #48]	@ (8001c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c5e:	490d      	ldr	r1, [pc, #52]	@ (8001c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c60:	4a0d      	ldr	r2, [pc, #52]	@ (8001c98 <LoopForever+0xe>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c74:	4c0a      	ldr	r4, [pc, #40]	@ (8001ca0 <LoopForever+0x16>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c82:	f000 f811 	bl	8001ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c86:	f7ff fde3 	bl	8001850 <main>

08001c8a <LoopForever>:

LoopForever:
  b LoopForever
 8001c8a:	e7fe      	b.n	8001c8a <LoopForever>
  ldr   r0, =_estack
 8001c8c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c94:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001c98:	08001d10 	.word	0x08001d10
  ldr r2, =_sbss
 8001c9c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001ca0:	2000004c 	.word	0x2000004c

08001ca4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <ADC1_IRQHandler>
	...

08001ca8 <__libc_init_array>:
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	4d0d      	ldr	r5, [pc, #52]	@ (8001ce0 <__libc_init_array+0x38>)
 8001cac:	4c0d      	ldr	r4, [pc, #52]	@ (8001ce4 <__libc_init_array+0x3c>)
 8001cae:	1b64      	subs	r4, r4, r5
 8001cb0:	10a4      	asrs	r4, r4, #2
 8001cb2:	2600      	movs	r6, #0
 8001cb4:	42a6      	cmp	r6, r4
 8001cb6:	d109      	bne.n	8001ccc <__libc_init_array+0x24>
 8001cb8:	4d0b      	ldr	r5, [pc, #44]	@ (8001ce8 <__libc_init_array+0x40>)
 8001cba:	4c0c      	ldr	r4, [pc, #48]	@ (8001cec <__libc_init_array+0x44>)
 8001cbc:	f000 f818 	bl	8001cf0 <_init>
 8001cc0:	1b64      	subs	r4, r4, r5
 8001cc2:	10a4      	asrs	r4, r4, #2
 8001cc4:	2600      	movs	r6, #0
 8001cc6:	42a6      	cmp	r6, r4
 8001cc8:	d105      	bne.n	8001cd6 <__libc_init_array+0x2e>
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cd0:	4798      	blx	r3
 8001cd2:	3601      	adds	r6, #1
 8001cd4:	e7ee      	b.n	8001cb4 <__libc_init_array+0xc>
 8001cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cda:	4798      	blx	r3
 8001cdc:	3601      	adds	r6, #1
 8001cde:	e7f2      	b.n	8001cc6 <__libc_init_array+0x1e>
 8001ce0:	08001d08 	.word	0x08001d08
 8001ce4:	08001d08 	.word	0x08001d08
 8001ce8:	08001d08 	.word	0x08001d08
 8001cec:	08001d0c 	.word	0x08001d0c

08001cf0 <_init>:
 8001cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf2:	bf00      	nop
 8001cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cf6:	bc08      	pop	{r3}
 8001cf8:	469e      	mov	lr, r3
 8001cfa:	4770      	bx	lr

08001cfc <_fini>:
 8001cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfe:	bf00      	nop
 8001d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d02:	bc08      	pop	{r3}
 8001d04:	469e      	mov	lr, r3
 8001d06:	4770      	bx	lr
